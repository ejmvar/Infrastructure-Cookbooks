# Nagios Service Definitions.
#
# Automatically generated by Chef.

define service {
    use                 default-service
    host_name           *
    service_description ping
    check_command       check_ping!200.0,20%!500.0,60%
}

# monitoring service checks
define service {
    service_description Nagios
    hostgroup_name      nagios_server
    check_command       check-nagios
    contact_groups      admins
    use                 default-service
}

# Nagios connectivity
define service {
    service_description http_clickatell
    hostgroup_name      nagios_server
    check_command       check_http_clickatell
    contact_groups      admins
    use                 default-service
}

# default checks for all hosts

define service {
    service_description Free Space All Disks
    hostgroup_name      all
    check_command       check_all_disks
    use                 default-service
}

define service {
    service_description Load Average
    hostgroup_name      all
    check_command       check_load
    use                 default-service
}

define service {
    service_description Free Memory
    hostgroup_name      all
    check_command       check_mem
    use                 default-service
}

define service {
    service_description Monit Processes
    hostgroup_name      all
    check_command       check_monit
    use                 default-service
}

define service {
    service_description SSH
    hostgroup_name      all
    check_command       check_ssh
    use                 medium-interval-service
}

define service {
    service_description Processes
    hostgroup_name      all
    check_command       check_local_procs
    use                 default-service
}

define service {
    service_description Packages
    hostgroup_name      all
    check_command       check_nrpe!check_apt
    use                 default-service
}

define service {
    service_description connect_to_chef
    hostgroup_name      all
    check_command       check_nrpe!check_https_chef
    use                 default-service
}

define service {
    service_description check_time_difference
    hostgroup_name      all
    check_command       check_nrpe!check_ntp_time
    use                 default-service
}

define service {
    service_description connect_to_splunk
    hostgroup_name      all
    check_command       check_nrpe!check_tcp_splunk
    use                 default-service
}

<% unless @service_hosts['splunk_server'].nil? %>
define servicedependency{
    host_name                     <%= "#{@service_hosts['splunk_server']}.#{node[:domain]}"%>
    service_description           ping
    dependent_hostgroup_name      all
    dependent_service_description connect_to_splunk
    notification_failure_criteria	w,u,c
}
<% end %>

define service {
    service_description search_ldap
    hostgroup_name      all
    check_command       check_nrpe!check_ldap
    use                 long-interval-service
}

define service {
    service_description Internal DNS Lookups
    hostgroup_name      all
    check_command       check_nrpe!check_internal_dns
    use                 default-service
}

define service {
    service_description External DNS Lookups
    hostgroup_name      all
    check_command       check_nrpe!check_external_dns
    use                 default-service
}

<% unless @service_hosts['nagios_server'].nil? %>
define servicedependency{
    host_name                     <%= "#{@service_hosts['nagios_server']}.#{node[:domain]}"%>
    service_description           External DNS Lookups
    dependent_host_name           *, !<%= "#{@service_hosts['nagios_server']}.#{node[:domain]}"%>
    dependent_service_description External DNS Lookups
    notification_failure_criteria	w,u,c
}
<% end %>

<% unless @service_hosts['proxy'].nil? -%>
  # http(s)(cert|status) checks from nagios server
  <% %w(http https https_cert http_status https_status).each do |protocol| -%>

define service {
    service_description <%= protocol %>
    hostgroup_name      proxy
    check_command       check_<%= protocol %>
    use                 default-service
}

  <% end -%>

  # http/https checks from localhost
  <% %w(http https).each do |protocol| -%>
define service {
    service_description <%= protocol %>_localhost
    hostgroup_name      proxy
    check_command       check_nrpe!check_<%= protocol %>_localhost
    use                 default-service
}
  <% end -%>
<% end -%> # proxy_checks

<% unless @service_hosts['app_server'].nil? -%>
  # https(cert|status) checks from nagios server
  <% %w(https https_cert).each do |protocol| -%>

define service {
    service_description <%= protocol %>
    hostgroup_name      app_server
    check_command       check_<%= protocol %>
    use                 default-service
}

  <% end -%>

  # https checks from localhost
  <% %w(https).each do |protocol| -%>
define service {
    service_description <%= protocol %>_localhost
    hostgroup_name      app_server
    check_command       check_nrpe!check_<%= protocol %>_localhost
    use                 default-service
}
  <% end -%>

define service {
    service_description check_smtp
    hostgroup_name      app_server
    check_command       check_nrpe!check_smtp
    contact_groups      admins
    use                 medium-interval-service
}

define service {
    service_description check_mailq
    hostgroup_name      app_server
    check_command       check_nrpe!check_mailq
    contact_groups      admins
    use                 medium-interval-service
}

define service {
    service_description check_errbit_connection
    hostgroup_name      app_server
    check_command       check_nrpe!check_https_errbit
    contact_groups      admins
    use                 default-service
}

<% end -%> # app_server_checks

<% unless @service_hosts['utility_server'].nil? -%>

define service {
    service_description check_smtp
    hostgroup_name      utility_server
    check_command       check_nrpe!check_smtp
    contact_groups      admins
    use                 medium-interval-service
}

define service {
    service_description check_mailq
    hostgroup_name      utility_server
    check_command       check_nrpe!check_mailq
    contact_groups      admins
    use                 medium-interval-service
}

define service {
    service_description check_errbit_connection
    hostgroup_name      utility_server
    check_command       check_nrpe!check_https_errbit
    contact_groups      admins
    use                 default-service
}

<% end -%> # utility_server_checks

<% unless @service_hosts['td_gateway'].nil? -%>

define service {
    service_description connect_to_td
    hostgroup_name      td_gateway
    check_command       check_nrpe!check_ftp_td
    contact_groups      admins
    use                 default-service
}

<% end -%> # td_gateway

<% %w(database_master database_slave wordpress_server additional_database).each do |env| %>
  <% unless @service_hosts[env].nil? -%>
# basic check if the database_master role is a mysql server
# database_master service checks
define service {
    service_description  MySQL
    hostgroup_name       <%= env %>
    check_command        check_nrpe!check_mysql_server
    use                  default-service
}
  <% end -%>
<% end -%>

<% %w(database_backups).each do |env| %>
  <% unless @service_hosts[env].nil? -%>
define service {
    service_description  mysql_backups
    hostgroup_name       <%= env %>
    check_command        check_nrpe!check_mysql_backups
    use                  default-service
}
  <% end -%>
<% end -%>

<% %w(backup).each do |env| %>
  <% unless @service_hosts[env].nil? -%>
define service {
    service_description  backups
    hostgroup_name       <%= env %>
    check_command        check_nrpe!check_backups
    use                  default-service
}
  <% end -%>
<% end -%>

<% %w(backup_server).each do |env| %>
  <% unless @service_hosts[env].nil? -%>
define service {
    service_description  received_backups
    hostgroup_name       <%= env %>
    check_command        check_nrpe!check_received_backups
    use                  default-service
}
  <% end -%>
<%end -%>

<% %w(database_slave eft3_external_db_master mothership_external_db_master redmine_external_db_master versagate_external_db_master www_prod_external_db_master).each do |env| %>
  <% unless @service_hosts[env].nil? -%>
define service {
    service_description  mysql_slave
    hostgroup_name       <%= env %>
    check_command        check_nrpe!check_mysql_slave
    use                  default-service
}
  <% end -%>
<% end -%>
